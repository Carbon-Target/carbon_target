doctype html
html
  head

    meta charset="UTF-8"
    meta name="keywords" content="Carbon target bilan carbone giec ademe environnment impact objectifs calcul"
    meta http-equiv="Content-Type" content="text/html; charset=utf-8"
    meta content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0" name="viewport"

    title Carbon Target
    link rel="icon" type="image/png" sizes="32x32" href="/images/favicons/favicon-32x32.png"
    link rel="icon" type="image/png" sizes="16x16" href="/images/favicons/favicon-16x16.png"
    link rel="shortcut icon" href="/images/favicons/favicon.ico"
    link rel="apple-touch-icon" sizes="180x180" href="/images/favicons.png"

    link rel="stylesheet" href="style.css"

    javascript [type="module"]:
      import { Application, Controller } from "https://unpkg.com/@hotwired/stimulus/dist/stimulus.js"

      window.Stimulus = Application.start()

      Stimulus.register("slider", class extends Controller {
        static targets = [ "range", "label", "value" ]

        connect() {
          setTimeout(function() {
            this.updateLabelPosition()
          }.bind(this), 1000)
        }

        updateLabelPosition() {
          this.valueTarget.innerHTML = this.rangeTarget.value
          let percent = this.rangeTarget.value * 100 / this.rangeTarget.max
          this.labelTarget.style.left = `calc(${percent}% - ${this.labelTarget.clientWidth}px / 2)`
        }
      })

      Stimulus.register("carbon-item", class extends Controller {
        static targets = [ "quantity", "result", "max", "min", "slider" ]
        static values = {
          emissionFactor: Number,
          frequency: String,
          previous: Number,
          min: Number,
          max: Number,
          current: Number,
          type: String,
          subtype: String
        }

        initialize() {
          this.frequencyHash = { day: 365, week: 52, month: 12, year: 1 }
        }

        connect() {
          this.updateResult()
          this.dispatch("carbonItemConnected")
        }

        minValueChanged() {
          this.minTarget.innerHTML = this.minValue
          const sliderController = this.application.getControllerForElementAndIdentifier(this.sliderTarget, 'slider')
          if (sliderController) {
            sliderController.updateLabelPosition()
          }
          this.quantityTarget.setAttribute("min", this.minValue)
        }

        maxValueChanged() {
          this.maxTarget.innerHTML = this.maxValue
          const sliderController = this.application.getControllerForElementAndIdentifier(this.sliderTarget, 'slider')
          if (sliderController) {
            sliderController.updateLabelPosition()
          }
          this.quantityTarget.setAttribute("max", this.maxValue)
        }

        mainRecapController() {
          const mainRecap = document.querySelector('[data-controller~=carbon-main-recap]')
          return this.application.getControllerForElementAndIdentifier(mainRecap, 'carbon-main-recap')
        }

        recapController() {
          const recap = this.element.closest('[data-controller~=carbon-recap]')
          return this.application.getControllerForElementAndIdentifier(recap, 'carbon-recap')
        }

        computeFrequencyFactor() {
          return this.frequencyHash[this.frequencyValue]
        }

        emissionFactorValueChanged() {
          this.updateResult()
        }

        unitToCarbon(value) {
          return value * this.computeFrequencyFactor() * this.emissionFactorValue
        }

        carbonToUnit(value) {
          return value / (this.computeFrequencyFactor() * this.emissionFactorValue)
        }

        updateResult(event) {
          let result = this.unitToCarbon(this.quantityTarget.value)

          if (result) {
            // when an event is present, we touch other sliders
            // the only time an event is not present is in the connect() call
            // change this to Action Parameters if needed
            if (event) {
              const difference = result - this.unitToCarbon(this.previousValue)
              this.updateOtherSliders(difference)
              this.previousValue = this.quantityTarget.value
            }
          }

          this.resultTarget.value = Math.round(result || 0)
          this.resultTarget.dispatchEvent(new Event('change'))
        }

        decrementQuantityBy(difference) {
          this.updateQuantity(this.quantityTarget.value - difference)
        }

        updateQuantity(quantity) {
          this.quantityTarget.value = quantity
          this.resultTarget.value = Math.round(this.unitToCarbon(this.quantityTarget.value) || 0)
          this.previousValue = this.quantityTarget.value
          this.updateSlider()
        }

        isBelowMin() {
          return this.quantityTarget.value <= this.minValue
        }

        isAboveMin() {
          return this.quantityTarget.value > this.minValue
        }

        isAboveMax() {
          return this.quantityTarget.value >= this.maxValue
        }

        isQuantityTargetOutOfBounds() {
          return this.isBelowMin() || this.isAboveMax()
        }

        updateOtherSliders(difference) {
          let itemsControllers = this.mainRecapController().carbonItemControllers().filter(controller => {
            return controller !== this
          })

          // Compute the total number of items to affect with modifications
          if (difference < 0) {
            // we exclude the maxed out inputs
            itemsControllers = itemsControllers.filter(itemController => {
              return !(itemController.isAboveMax()) && !(itemController.isBelowMin())
            })
          } else {
            // we exclude min-ed out inputs
            itemsControllers = itemsControllers.filter(itemController => {
              return !(itemController.isBelowMin())
            })
          }

          const itemsCount = itemsControllers.length

          itemsControllers.forEach(itemController => {
            let result = itemController.unitToCarbon(itemController.quantityTarget.value) - (difference / itemsCount)

            const resultInUnit = itemController.carbonToUnit(result)
            itemController.updateQuantity(resultInUnit)
          })

          // After updating all items, we also update all categories counts
          // (should this be placed in the mainRecapController ?)
          this.mainRecapController().carbonRecapControllers().forEach((recapController) => {
            recapController.updateResult()
          })
        }

        updateSlider() {
          const sliderController = this.application.getControllerForElementAndIdentifier(this.sliderTarget, 'slider')
          sliderController.updateLabelPosition()
        }
      })

      Stimulus.register("carbon-main-recap", class extends Controller {
        static targets = [ "item", "total", "box", "unit", "goal" ]
        static classes = [ "aboveTarget", "belowTarget" ]

        connect() {
          this.updateBoxColor(0)

          setTimeout(function() {
            this.updateItemsMaxValue(parseInt(this.goalTarget.innerHTML) * 1000)
          }.bind(this), 1000)
        }

        carbonItemControllers() {
          const items = Array.from(this.element.querySelectorAll("[data-controller~=carbon-item]"))
          this.itemControllers ||= items.map(item => {
            return this.application.getControllerForElementAndIdentifier(item, 'carbon-item')
          })
          return this.itemControllers
        }

        carbonRecapControllers() {
          const recaps = Array.from(this.element.querySelectorAll("[data-controller~=carbon-recap]"))
          this.recapControllers ||= recaps.map(recap => {
            return this.application.getControllerForElementAndIdentifier(recap, 'carbon-recap')
          })
          return this.recapControllers
        }

        // Sums the result of each line & updates the total
        updateResult() {
          let result = 0
          this.itemTargets.forEach(item => {
            result += parseFloat(item.innerHTML)
          })

           // Convert kg into t
          result = (result / 1000).toFixed(2)
          this.totalTarget.innerHTML = result

          this.updateUnit(result);
          this.updateBoxColor(result);
        }

        updateUnit(result) {
          if (result < 2) {
            this.unitTarget.innerHTML = "&nbsp;tonne"
          } else {
            this.unitTarget.innerHTML = "&nbsp;tonnes"
          }
        }

        updateBoxColor(result) {
          if (!this.hasBoxTarget) { return }
          if (result <= parseFloat(this.goalTarget.innerHTML)) {
            this.boxTarget.classList.remove(this.aboveTargetClass)
            this.boxTarget.classList.add(this.belowTargetClass)
          } else {
            this.boxTarget.classList.remove(this.belowTargetClass)
            this.boxTarget.classList.add(this.aboveTargetClass)
          }
        }

        // Triggered from target-slider controller when the total goal is changed
        // All maximums should be updated.
        updateItemsMaxValue(goalValue) {
          this.carbonItemControllers().forEach((itemController) => {
            if (itemController.typeValue == "meal") {
              // meal number is given / week, so we have to account for that
              itemController.maxValue = Math.round(goalValue / (itemController.emissionFactorValue * 52))
            } else {
              itemController.maxValue = Math.round(goalValue / itemController.emissionFactorValue)
            }
          })
        }

      })

      Stimulus.register("carbon-recap", class extends Controller {

        static targets = [ "item", "total", "box", "unit", "slider", "result" ]

        connect() {
          this.updateResult()
        }

        mainRecapTotal() {
          return parseFloat(this.mainRecapController.totalTarget.innerHTML) * 1000
        }

        carbonItemControllers() {
          const items = Array.from(this.element.querySelectorAll("[data-controller~=carbon-item]"))
          this.itemControllers = items.map(item => {
            return this.application.getControllerForElementAndIdentifier(item, 'carbon-item')
          })
          return this.itemControllers
        }

        // Sums the result of each line & updates the total
        updateResult() {
          let result = 0
          this.resultTargets.forEach(item => {
            result += parseFloat(item.value)
          })

          result = result
          this.totalTarget.innerHTML = result

          this.updateUnit(result)
          this.dispatch("updateResult")
        }

        updateUnit(result) {
          if (result < 2) {
            this.unitTarget.innerHTML = "&nbsp;kilo"
          } else {
            this.unitTarget.innerHTML = "&nbsp;kilos"
          }
        }
      })

      Stimulus.register("modal", class extends Controller {
        open(event) {
          const mod = document.querySelector(this.element.dataset.modal)
          mod.classList.add("is-active")
        }

        close(event) {
          this.element.classList.remove("is-active")
        }
      })

      Stimulus.register("slide", class extends Controller {
        static targets = [ "list", "angleUp", "angleDown", "slider" ]

        connect() {
          this.listTarget.classList.add("is-hidden")
        }

        toggleList(event) {
          this.listTarget.classList.toggle("is-hidden")
          this.angleDownTarget.classList.toggle("is-hidden")
          this.angleUpTarget.classList.toggle("is-hidden")

          this.dispatchToSliders()
        }

        dispatchToSliders() {
          if (!this.listTarget.classList.contains("is-hidden")) {
            this.sliderTargets.forEach((e) => {
              const sliderControlers = this.application.getControllerForElementAndIdentifier(e, 'slider')
              sliderControlers.updateLabelPosition()
            })
          }
        }
      })

      Stimulus.register("kinds-picker", class extends Controller {
        static targets = [ "radio", "sliderElement", "slider" ]

        changeKind() {
          const selectedRadio = this.radioTargets.find(radio => { return radio.checked })
          let item = this.element.closest('[data-controller~=carbon-item]')
          // Add to this condition if we don't want to change the slider value, but change the computed result instead
          if (item) {
            if (this.sliderElementTarget && this.sliderElementTarget.value > 0) {
              let newValue = this.sliderElementTarget.value * item.dataset.carbonItemEmissionFactorValue / selectedRadio.value
              this.sliderElementTarget.value = newValue
              const sliderController = this.application.getControllerForElementAndIdentifier(this.sliderTarget, 'slider')
              sliderController.updateLabelPosition()
            }
            item.dataset.carbonItemEmissionFactorValue = selectedRadio.value
          }
        }
      })

      Stimulus.register("target-slider", class extends Controller {
        static targets = [ "value", "range", "unit" ]

        updateUnit(result) {
          if (result < 2) {
            this.unitTarget.innerHTML = "&nbsp;tonne"
          } else {
            this.unitTarget.innerHTML = "&nbsp;tonnes"
          }
        }

        mainRecapController() {
          const mainRecap = document.querySelector('[data-controller~=carbon-main-recap]')
          return this.application.getControllerForElementAndIdentifier(mainRecap, 'carbon-main-recap')
        }

        updateValue() {
          this.valueTarget.innerHTML = this.rangeTarget.value

          this.updateUnit(this.rangeTarget.value)
          this.mainRecapController().updateItemsMaxValue(this.rangeTarget.value * 1000)
        }

        increaseValue() {
          this.rangeTarget.value = parseInt(this.rangeTarget.value) + 1
          this.updateValue()
        }

        decreaseValue() {
          this.rangeTarget.value = parseInt(this.rangeTarget.value) - 1
          this.updateValue()
        }
      })


    script type="text/javascript" src="javascript.js"

body class="container block is-max-desktop"
  section class="section" data-controller="carbon-main-recap" data-carbon-main-recap-below-target-class="has-background-primary-light" data-carbon-main-recap-above-target-class="has-background-danger-light"
    div class="content has-text-centered-desktop pb-6"
      h1 class="title is-1" Bienvenue sur Carbon Target&nbsp;!

      p
        | Ce projet n'a pas pour vocation d'être un nouveau calculateur d'empreinte carbone personnelle car
        a data-controller="modal" data-modal="#calculators" data-action="click->modal#open"
          |  il en existe déjà de très bons
        |  !

      p
        | Notre but est uniquement de compléter ces calculateurs sur la partie "prospective", en permettant à n'importe qui de répondre facilement et de manière personnalisée à la question : "Qu'est ce que je peux faire avec un "budget" de
        a data-controller="modal" data-modal="#twotonnes" data-action="click->modal#open"
          |  2 tonnes de CO2
        |  ?"

      p On vous spoile un peu la réponse :

      ol
        li C'est possible, et ça, c'est une super nouvelle !
        li
          | C'est exigeant, nos modes de vie vont devoir
          a data-controller="modal" data-modal="#change" data-action="click->modal#open"
            |  changer radicalement à tous les niveaux
          | .

      p Maintenant, c'est à vous de jouer : à quoi pourrait ressembler votre vie à 2 tonnes ?

    section class="is-mobile carbon-target" data-controller="target-slider"
      section class="level"
        div class="box level-item has-text-centered" data-carbon-main-recap-target="box"
          div
            p class="heading" Calcul
            p class="title"
              span data-carbon-main-recap-target="total"
                = "0.00"
              span class="is-hidden-tablet" t
              span class="is-hidden-mobile" data-carbon-main-recap-target="unit" &nbsp;tonne

        div class="level-item has-text-centered"
          div
            p class="heading" VS

        div class="box level-item has-text-centered has-background-primary-light"
          div
            p class="heading" Cible
            p class="title"
              span data-target-slider-target="value" data-carbon-main-recap-target="goal"
                = "2"
              span class="is-hidden-tablet" t
              span class="is-hidden-mobile" data-target-slider-target="unit" &nbsp;tonnes

      div class="target-slider"
        div.control.slider
          span.arrow.has-text-link.is-size-2.is-align-self-center data-action="click->target-slider#decreaseValue click->carbon-main-recap#updateResult"
            <img src="/images/left-arrow.png" />
          span.slider-container.is-align-self-center
            input.is-size-7-mobile [
              value=2
              type="range"
              data-action="input->target-slider#updateValue input->carbon-main-recap#updateResult"
              data-target-slider-target="range"
              min="0" max="10" step="1"]
          span.arrow.has-text-link.is-size-2.is-align-self-center data-action="click->target-slider#increaseValue click->carbon-main-recap#updateResult"
            <img src="/images/right-arrow.png" />

    div class="block" data-controller="carbon-recap slide" data-action="carbon-recap:updateResult->carbon-main-recap#updateResult"

      h2 class="title is-4 has-background-info-light p-3 is-flex is-justify-content-space-between is-clickable"
        span.icon-text data-action="click->slide#toggleList"
          span.icon
            i.fas.fa-angle-down data-slide-target="angleDown"
            i.fas.fa-angle-up.is-hidden data-slide-target="angleUp"
          span = "Se déplacer"

        span
          span data-carbon-recap-target="total" data-carbon-main-recap-target="item" 0
          span class="is-hidden-tablet" kg
          span class="is-hidden-mobile" data-carbon-recap-target="unit" &nbsp;kilo
      ul data-slide-target="list"
        li data-controller="carbon-item kinds-picker" data-carbon-item-emission-factor-value="0.149" data-carbon-item-frequency-value="year" data-carbon-item-previous-value="5000" data-carbon-item-min-value="0" data-carbon-item-max-value="5241" data-carbon-item-current-value="5000" data-carbon-recap-target="item"
          == Slim::Template.new("./src/carbon_item.slim").render({ name: "Voiture", id: "car-gas", unit: "km", frequency: "year", value: 5000, kinds: [{label: "GO", emission_factor: 0.142, color: "#E7E50E", selected: true}, {label: "SP", emission_factor: 0.149, color: "#71BD69"}, {label: "VH", emission_factor: 0.098, color: "linear-gradient(135deg, #71BD69 50%, #3e8ed0 50%)"}, {label: "VE", emission_factor: 0.0687, color: "#3e8ed0"}], kinds_title: "Type de véhicule : " })
        li data-controller="carbon-item kinds-picker" data-carbon-item-emission-factor-value="0.00592" data-carbon-item-frequency-value="year" data-carbon-item-previous-value="6000" data-carbon-item-min-value="0" data-carbon-item-max-value="131925" data-carbon-item-current-value="6000" data-carbon-recap-target="item"
          == Slim::Template.new("./src/carbon_item.slim").render({ name: "Train", id: "train-france", unit: "km", frequency: "year", value: 6000, kinds: [{label: "    ", emission_factor: 0.00592, color: "url(/images/flag-fr.png) no-repeat center center", selected: true}, {label: "    ", emission_factor: 0.05, color: "url(/images/flag-eu.png) no-repeat center center"}], kinds_title: "Train en : " })
        li data-controller="carbon-item kinds-picker" data-carbon-item-emission-factor-value="0.258" data-carbon-item-frequency-value="year" data-carbon-item-previous-value="0" data-carbon-item-min-value="0" data-carbon-item-max-value="3027" data-carbon-item-current-value="0" data-carbon-recap-target="item"
          == Slim::Template.new("./src/carbon_item.slim").render({ name: "Avion", id: "plane-short", unit: "km", frequency: "year", value: 0, kinds: [{label: "C", emission_factor: 0.258, color: "#3e8ed0", selected: true}, {label: "M", emission_factor: 0.187, color: "#3e8ed0"}, {label: "L", emission_factor: 0.152, color: "#3e8ed0"}], kinds_title: "Type d'avion : " })

    div class="block" data-controller="carbon-recap slide" data-action="carbon-recap:updateResult->carbon-main-recap#updateResult"
      h2 class="title is-4 has-background-info-light p-3 is-flex is-justify-content-space-between is-clickable"
        span.icon-text data-action="click->slide#toggleList"
          span.icon
            i.fas.fa-angle-down data-slide-target="angleDown"
            i.fas.fa-angle-up.is-hidden data-slide-target="angleUp"
          span = "Se nourrir"

        span
          span data-carbon-recap-target="total" data-carbon-main-recap-target="item" 0
          span class="is-hidden-tablet" kg
          span class="is-hidden-mobile" data-carbon-recap-target="unit" &nbsp;kilo
      ul data-slide-target="list"
        li data-controller="carbon-item" data-carbon-item-emission-factor-value="7.26" data-carbon-item-frequency-value="week" data-carbon-item-previous-value="0" data-carbon-item-min-value="0" data-carbon-item-max-value="21" data-carbon-item-current-value="0" data-carbon-item-type-value="meal" data-carbon-item-subtype-value="beef" data-carbon-recap-target="item"
          == Slim::Template.new("./src/carbon_item.slim").render({ name: "Repas à base de boeuf", id: "meal-beef", unit: "repas", frequency: "week", value: 0 })
        li data-controller="carbon-item" data-carbon-item-emission-factor-value="1.58" data-carbon-item-frequency-value="week" data-carbon-item-previous-value="1" data-carbon-item-min-value="0" data-carbon-item-max-value="21" data-carbon-item-current-value="1" data-carbon-item-type-value="meal" data-carbon-item-subtype-value="chicken" data-carbon-recap-target="item"
          == Slim::Template.new("./src/carbon_item.slim").render({ name: "Repas à base de poulet", id: "meal-chicken", unit: "repas", frequency: "week", value: 1 })
        li data-controller="carbon-item" data-carbon-item-emission-factor-value="0.51" data-carbon-item-frequency-value="week" data-carbon-item-previous-value="20" data-carbon-item-min-value="0" data-carbon-item-max-value="21" data-carbon-item-current-value="20" data-carbon-item-type-value="meal" data-carbon-item-subtype-value="veg" data-carbon-recap-target="item"
          == Slim::Template.new("./src/carbon_item.slim").render({ name: "Repas végétariens", id: "meal-veg", unit: "repas", frequency: "week", value: 20 })

    div class="block" data-controller="carbon-recap slide" data-action="carbon-recap:updateResult->carbon-main-recap#updateResult"
      h2 class="title is-4 has-background-info-light p-3 is-flex is-justify-content-space-between is-clickable"
        span.icon-text data-action="click->slide#toggleList"
          span.icon
            i.fas.fa-angle-down data-slide-target="angleDown"
            i.fas.fa-angle-up.is-hidden data-slide-target="angleUp"
          span = "S'équiper"

        span
          span data-carbon-recap-target="total" data-carbon-main-recap-target="item" 0
          span class="is-hidden-tablet" kg
          span class="is-hidden-mobile" data-carbon-recap-target="unit" &nbsp;kilo
      ul data-slide-target="list"
        li data-controller="carbon-item" data-carbon-item-emission-factor-value="0.6" data-carbon-item-frequency-value="year" data-carbon-item-previous-value="0" data-carbon-item-min-value="0" data-carbon-item-max-value="333" data-carbon-item-current-value="0" data-carbon-recap-target="item"
          == Slim::Template.new("./src/carbon_item.slim").render({ name: "Vêtements neufs", id: "clothes-new", unit: "€", frequency: "year", value: 0 })
        li data-controller="carbon-item" data-carbon-item-emission-factor-value="0.6" data-carbon-item-frequency-value="year" data-carbon-item-previous-value="0" data-carbon-item-min-value="0" data-carbon-item-max-value="333" data-carbon-item-current-value="0" data-carbon-recap-target="item"
          == Slim::Template.new("./src/carbon_item.slim").render({ name: "Meubles neufs", id: "furniture-new", unit: "€", frequency: "year", value: 0 })
        li data-controller="carbon-item" data-carbon-item-emission-factor-value="0.4" data-carbon-item-frequency-value="year" data-carbon-item-previous-value="500" data-carbon-item-min-value="0" data-carbon-item-max-value="500" data-carbon-item-current-value="500" data-carbon-recap-target="item"
          == Slim::Template.new("./src/carbon_item.slim").render({ name: "Electronique neuf", id: "elec-new", unit: "€", frequency: "year", value: 500 })

    div class="block" data-controller="carbon-recap slide" data-action="carbon-recap:updateResult->carbon-main-recap#updateResult"
      h2 class="title is-4 has-background-info-light p-3 is-flex is-justify-content-space-between is-clickable"
        span.icon-text data-action="click->slide#toggleList"
          span.icon
            i.fas.fa-angle-down data-slide-target="angleDown"
            i.fas.fa-angle-up.is-hidden data-slide-target="angleUp"
          span = "Se loger"

        span
          span data-carbon-recap-target="total" data-carbon-main-recap-target="item" 0
          span class="is-hidden-tablet" kg
          span class="is-hidden-mobile" data-carbon-recap-target="unit" &nbsp;kilo

      ul data-slide-target="list"
        li data-controller="carbon-item kinds-picker" data-carbon-item-emission-factor-value="8.5" data-carbon-item-frequency-value="year" data-carbon-item-min-value="0" data-carbon-item-max-value="100" data-carbon-item-current-value="37" data-carbon-recap-target="item"
          == Slim::Template.new("./src/carbon_item.slim").render({ name: "Consommation énergie logement", id: "electricity", unit: "m²/hab", frequency: "year", no_week: true, no_month: true, no_time_unit: true, value: 37, kinds: [{label: "A", emission_factor: 3, color: "#009F6E"}, {label: "B", emission_factor: 8.5, color: "#4CB153", selected: true}, {label: "C", emission_factor: 20.5, color: "#71BD69"}, {label: "D", emission_factor: 40, color: "#E7E50E"}, {label: "E", emission_factor: 60, color: "#EEB10C"}, {label: "F", emission_factor: 85, color: "#E78539"}, {label: "G", emission_factor: 120, color: "#D32227"}], kinds_title: "DPE du logement (étiquette climat) : " })

  section class="section"
    div class="content has-text-centered-desktop pb-6"
      p.has-text-centered-desktop
        = "Vous l'avez constaté, le calcul ne se base que sur 4 besoins humains \"essentiels\" (se déplacer, se nourrir, se loger, s'équiper) et n'est donc pas exhaustif. Il couvre tout de même près de 80% du périmètre de l'empreinte carbone personnelle et donne donc, sans entrer dans une grande complexité, une bonne idée de ce que l'on peut faire ou pas pour rester dans la limite des 2 tonnes."

      p class="has-text-centered-desktop"
        = "Carbon Target est un projet citoyen open source qui se base sur les données de l'ADEME (Bilan GES). Il s'agit pour l'instant d'un MVP basique et largement améliorable, qui a pour objectif de lancer une dynamique. En effet, nous serions ravis que des initiatives ou des institutions plus grandes et plus légitimes que nous (Shift Project, Datagir.Ademe.fr, Convention des Entreprises pour le Climat, MyCO2 by Carbone 4, Atelier 2 tonnes, …) aient envie de s'approprier cette idée simple pour la faire vivre et lui donner une autre dimension."

      p class="has-text-centered-desktop"
       | Que vous souhaitiez qu'on vous aide à intégrer Carbon Target à un de vos projets ou que vous souhaitiez reprendre l'idée à votre compte, n'hésitez pas à nous contacter à <a href="mailto:hello@carbontarget.earth">hello@carbontarget.earth</a> !

  == Slim::Template.new("./src/modals.slim").render()
