doctype html
html
  head

    meta charset="UTF-8"
    meta name="keywords" content="Carbon target bilan carbone giec ademe environnment impact objectifs calcul"
    meta http-equiv="Content-Type" content="text/html; charset=utf-8"
    meta content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0" name="viewport"

    title Carbon Target
    link rel="icon" type="image/png" sizes="32x32" href="/images/favicons/favicon-32x32.png"
    link rel="icon" type="image/png" sizes="16x16" href="/images/favicons/favicon-16x16.png"
    link rel="shortcut icon" href="/images/favicons/favicon.ico"
    link rel="apple-touch-icon" sizes="180x180" href="/images/favicons.png"

    link rel="stylesheet" href="style.css"

    javascript [type="module"]:
      import { Application, Controller } from "https://unpkg.com/@hotwired/stimulus/dist/stimulus.js"

      window.Stimulus = Application.start()

      Stimulus.register("slider", class extends Controller {
        static targets = [ "range", "label", "value", "editContainer", "valueContainer", "labelInput" ]

        connect() {
          setTimeout(function() {
            this.updateLabelPosition()
          }.bind(this), 1000)
        }

        updateLabelPosition() {
          this.valueTarget.innerHTML = this.rangeTarget.value
          this.labelInputTarget.value = this.rangeTarget.value
          let percent = this.rangeTarget.value * 100 / this.rangeTarget.max
          this.labelTarget.style.left = `calc(${percent}% - ${this.labelTarget.clientWidth}px / 2)`
        }

        enableEdit() {
          this.editContainerTarget.classList.toggle("is-hidden")
          this.valueContainerTarget.classList.toggle("is-hidden")
          if (!this.editContainerTarget.classList.contains("is-hidden")) {
            this.labelInputTarget.focus()
          }
        }

        submitEdit(event) {
          event.preventDefault()
          this.rangeTarget.value = this.labelInputTarget.value
          this.enableEdit()
          this.editContainerTarget.dispatchEvent(new Event('update'))
        }
      })

      Stimulus.register("carbon-item", class extends Controller {
        static targets = [ "quantity", "result", "max", "min", "slider", "unlock", "lock" ]
        static values = {
          emissionFactor: Number,
          frequency: String,
          previous: Number,
          min: Number,
          max: Number,
          current: Number,
          type: String,
          subtype: String,
          lock: Boolean
        }

        initialize() {
          this.frequencyHash = { day: 365, week: 52, month: 12, year: 1 }
          this.resetSlider = false
          this.mainRecapController = this.mainRecapController()
        }

        connect() {
          this.updateResult()
          this.dispatch("carbonItemConnected")
        }

        toggleLock() {
          this.lockValue = !this.lockValue
          this.unlockTarget.classList.toggle("is-hidden")
          this.lockTarget.classList.toggle("is-hidden")
        }

        minValueChanged() {
          this.minTarget.innerHTML = this.minValue
          this.updateSliderLabelPosition()
          this.quantityTarget.setAttribute("min", this.minValue)
        }

        maxValueChanged() {
          this.maxTarget.innerHTML = this.maxValue
          this.updateSliderLabelPosition()
          this.quantityTarget.setAttribute("max", this.maxValue)
        }

        mainRecapController() {
          const mainRecap = document.querySelector('[data-controller~=carbon-main-recap]')
          return this.application.getControllerForElementAndIdentifier(mainRecap, 'carbon-main-recap')
        }

        recapController() {
          const recap = this.element.closest('[data-controller~=carbon-recap]')
          return this.application.getControllerForElementAndIdentifier(recap, 'carbon-recap')
        }

        computeFrequencyFactor() {
          return this.frequencyHash[this.frequencyValue]
        }

        updateSliderLabelPosition() {
          const sliderController = this.application.getControllerForElementAndIdentifier(
            this.sliderTarget, 'slider'
          )
          if (sliderController) {
            sliderController.rangeTarget.max = this.maxValue
            sliderController.updateLabelPosition()
          }
        }

        emissionFactorValueChanged(value, previousValue) {
          setTimeout(function() {
            this.mainRecapController.updateItemsMaxValue(
              parseInt(this.mainRecapController.goalTarget.innerHTML) * 1000
            )
            // We have to force the callback maxValueChanged() because it is async
            // and we need the updated value right away
            this.maxValueChanged()
            this.quantityTarget.value = this.currentValue / (value * this.computeFrequencyFactor())

            this.updateResult()
            this.updateSliderLabelPosition()
          }.bind(this), 100)
        }

        unitToCarbon(value) {
          return value * this.computeFrequencyFactor() * this.emissionFactorValue
        }

        carbonToUnit(value) {
          return value / (this.computeFrequencyFactor() * this.emissionFactorValue)
        }

        updateResult(event) {
          this.resetSlider = false
          let result = this.unitToCarbon(this.quantityTarget.value)
          const memoizedCurrentValue = this.currentValue

          if (result != undefined) {
            // when an event is present, we touch other sliders
            // the only time an event is not present is in the connect() call
            // change this to Action Parameters if needed
            if (event) {
              const difference = result - this.currentValue
              this.updateOtherSliders(difference)

              // If the overall main-recap value is > objective, we substract the
              // residue from the CURRENT MOVING SLIDER (used mostly when we suddenly
              // push a slider very high)
              let mainRecapTotal = 0
              this.mainRecapController.carbonItemControllers().forEach(itemController => {
                if (itemController == this) {
                  mainRecapTotal += parseFloat(result)
                } else {
                  mainRecapTotal += parseFloat(itemController.currentValue)
                }
              })
              const mainRecapDifference = mainRecapTotal - this.mainRecapController.goalTarget.innerHTML * 1000
              if (mainRecapDifference > 0) {
                result = result - mainRecapDifference
              }
            }
          }

          result = this.resetSlider ? memoizedCurrentValue : result
          this.quantityTarget.value = this.carbonToUnit(result)
          this.resultTarget.innerHTML = result < 0 ? 0 : Math.round(result)
          this.currentValue = result
          this.resultTarget.dispatchEvent(new Event('change'))

          if (this.resetSlider) {
            this.updateSlider()
            this.resetSlider = false
          }
        }

        updateQuantity() {
          this.quantityTarget.value = this.carbonToUnit(this.currentValue)
          this.resultTarget.innerHTML = Math.round(this.unitToCarbon(this.quantityTarget.value))
          this.updateSlider()
        }

        isBelowMin(value) {
          return value <= this.minValue
        }

        isAboveMin(value) {
          return value > this.minValue
        }

        isAboveMax(value) {
          return value >= this.maxValue
        }

        isLocked() {
          return this.lockValue
        }

        aggregateCurrentValueFor(itemControllers) {
          let totalValue = 0
          itemControllers.forEach(itemController => {
            totalValue += itemController.currentValue
          })

          return totalValue
        }

        updateOtherSliders(difference) {
          let itemsControllers = this.mainRecapController.carbonItemControllers().filter(controller => {
            return controller !== this
          })

          // We filter out all inputs that are already < Min (0)
          itemsControllers = itemsControllers.filter(itemController => {
            return !itemController.isBelowMin(itemController.carbonToUnit(itemController.currentValue))
          })

          // we exclude locked out inputs
          itemsControllers = itemsControllers.filter(itemController => {
            return !(itemController.isLocked())
          })

          let itemsCount = itemsControllers.length

          // if all items other than the current one are at 0, we should halt all process
          // and return the current slider to its initial position, we set resetSlider to true
          if (itemsCount <= 0) {
            this.resetSlider = true
            return
          }

          // Compute the total number of items to affect with modifications
          if (difference < 0) {
            // we exclude the inputs that will be maxed out after applying the difference
            let maxedItemsTotalValue = this.aggregateCurrentValueFor(itemsControllers)
            const maxedItemsControllers = itemsControllers.filter(itemController => {
              return (
                itemController.isAboveMax(
                  itemController.carbonToUnit(
                    itemController.currentValue - (difference * (itemController.currentValue / maxedItemsTotalValue))
                  )
                )
              )
            })

            // For each maxed out items, we add the remaining value between the current
            // value and the max and update the difference (which is negative, which is why we use '+')
            // We then set the maxed out item to its actual max
            maxedItemsControllers.forEach((itemController) => {
              difference = difference + (itemController.unitToCarbon(itemController.maxValue) - itemController.currentValue)
              itemController.currentValue = itemController.unitToCarbon(itemController.maxValue)
              itemController.updateQuantity()
            })

            // we eliminate the maxed out items to apply regular processing to the rest
            maxedItemsTotalValue = this.aggregateCurrentValueFor(itemsControllers)
            itemsControllers = itemsControllers.filter(itemController => {
              return (
                !itemController.isAboveMax(
                  itemController.carbonToUnit(
                    itemController.currentValue - (difference * (itemController.currentValue / maxedItemsTotalValue))
                  )
                )
              )
            })
          } else {
            // When difference is > 0 (all other inputs have to be decreased)
            // we exclude the inputs that will be mined out after applying the difference
            let minedItemsTotalValue = this.aggregateCurrentValueFor(itemsControllers)

            if (minedItemsTotalValue > 0) {
              const minedItemsControllers = itemsControllers.filter(itemController => {
                return (
                  itemController.isBelowMin(
                    itemController.carbonToUnit(
                      itemController.currentValue - (difference * (itemController.currentValue / minedItemsTotalValue))
                    )
                  )
                )
              })

              // For each mined out items, we remove the remaining value between the current
              // value and the min and update the difference (which is positive, '-')
              // We then set the mined out item to its actual min
              minedItemsControllers.forEach((itemController) => {
                difference = difference - (itemController.currentValue - itemController.unitToCarbon(itemController.minValue))
                itemController.currentValue = itemController.unitToCarbon(itemController.minValue)
                itemController.updateQuantity()
              })

              minedItemsTotalValue = this.aggregateCurrentValueFor(itemsControllers)
              
              if (minedItemsTotalValue > 0) {
                itemsControllers = itemsControllers.filter(itemController => {
                  return (
                    !itemController.isBelowMin(
                      itemController.carbonToUnit(
                        itemController.currentValue - (difference * (itemController.currentValue / minedItemsTotalValue))
                      )
                    )
                  )
                })
              }
            }
          }

          itemsCount = itemsControllers.length
          const itemsTotalValue = this.aggregateCurrentValueFor(itemsControllers)

          if (itemsTotalValue > 0) {
            itemsControllers.forEach(itemController => {
              let result = itemController.currentValue - (difference * (itemController.currentValue / itemsTotalValue))

              itemController.currentValue = result
              itemController.updateQuantity()
            })
          }

          // After updating all items, we also update all categories counts
          // (should this be placed in the mainRecapController ?)
          this.mainRecapController.carbonRecapControllers().forEach((recapController) => {
            recapController.updateResult()
          })
        }

        updateSlider() {
          const sliderController = this.application.getControllerForElementAndIdentifier(this.sliderTarget, 'slider')
          sliderController.updateLabelPosition()
        }
      })

      Stimulus.register("carbon-main-recap", class extends Controller {
        static targets = [ "item", "total", "box", "unit", "goal" ]

        connect() {
          setTimeout(function() {
            this.updateItemsMaxValue(parseInt(this.goalTarget.innerHTML) * 1000)
          }.bind(this), 1000)
        }

        carbonItemControllers() {
          const items = Array.from(this.element.querySelectorAll("[data-controller~=carbon-item]"))
          this.itemControllers = items.map(item => {
            return this.application.getControllerForElementAndIdentifier(item, 'carbon-item')
          })
          return this.itemControllers
        }

        carbonRecapControllers() {
          const recaps = Array.from(this.element.querySelectorAll("[data-controller~=carbon-recap]"))
          this.recapControllers ||= recaps.map(recap => {
            return this.application.getControllerForElementAndIdentifier(recap, 'carbon-recap')
          })
          return this.recapControllers
        }

        // When the overall goal is moved, we need to adjust all items accordingly
        updateCarbonItems() {
          const newGoal = parseInt(this.goalTarget.innerHTML) * 1000

          // we exclude locked out inputs
          let lockedItems = this.itemControllers.filter(itemController => {
            return itemController.isLocked()
          })
          let unlockedItems = this.itemControllers.filter(itemController => {
            return !(itemController.isLocked())
          })
          let lockedSum = this.itemControllers[0].aggregateCurrentValueFor(lockedItems)
          let unlockedSum = this.itemControllers[0].aggregateCurrentValueFor(unlockedItems)

          unlockedItems.forEach((itemController) => {
            itemController.maxValueChanged()
            itemController.quantityTarget.value *= (newGoal - lockedSum) / unlockedSum

            itemController.updateResult()
            itemController.updateSliderLabelPosition()
          })
        }

        // Sums the result of each line & updates the total
        updateResult() {

          let result = 0
          this.itemTargets.forEach(item => {
            result += parseFloat(item.innerHTML)
          })

           // Convert kg into t
          result = (result / 1000).toFixed(1)
          this.totalTarget.innerHTML = result

          this.updateUnit(result);
        }

        updateUnit(result) {
          if (result < 2) {
            this.unitTarget.innerHTML = "&nbsp;tonne"
          } else {
            this.unitTarget.innerHTML = "&nbsp;tonnes"
          }
        }

        // Triggered from target-chooser controller when the total goal is changed
        // All maximums should be updated.
        updateItemsMaxValue(goalValue) {
          this.carbonItemControllers().forEach((itemController) => {
            if (itemController.typeValue == "meal") {
              // meal number is given / week, so we have to account for that
              itemController.maxValue = Math.round(goalValue / (itemController.emissionFactorValue * 52))
            } else {
              itemController.maxValue = Math.round(goalValue / itemController.emissionFactorValue)
            }
          })
        }
      })

      Stimulus.register("carbon-recap", class extends Controller {

        static targets = [ "item", "total", "box", "unit", "slider", "result" ]

        connect() {
          this.updateResult()
        }

        mainRecapTotal() {
          return parseFloat(this.mainRecapController.totalTarget.innerHTML) * 1000
        }

        carbonItemControllers() {
          const items = Array.from(this.element.querySelectorAll("[data-controller~=carbon-item]"))
          this.itemControllers = items.map(item => {
            return this.application.getControllerForElementAndIdentifier(item, 'carbon-item')
          })
          return this.itemControllers
        }

        // Sums the result of each line & updates the total
        updateResult() {
          let result = 0
          this.resultTargets.forEach(item => {
            result += parseFloat(item.innerHTML)
          })

          this.totalTarget.innerHTML = result

          this.updateUnit(result)
          this.dispatch("updateResult")
        }

        updateUnit(result) {
          if (result < 2) {
            this.unitTarget.innerHTML = "&nbsp;kilo"
          } else {
            this.unitTarget.innerHTML = "&nbsp;kilos"
          }
        }
      })

      Stimulus.register("modal", class extends Controller {
        open(event) {
          const mod = document.querySelector(this.element.dataset.modal)
          mod.classList.add("is-active")
        }

        close(event) {
          this.element.classList.remove("is-active")
        }
      })

      Stimulus.register("slide", class extends Controller {
        static targets = [ "list", "angleUp", "angleDown", "slider" ]

        connect() {
          this.listTarget.classList.add("is-hidden")
        }

        toggleList(event) {
          this.listTarget.classList.toggle("is-hidden")
          this.angleDownTarget.classList.toggle("is-hidden")
          this.angleUpTarget.classList.toggle("is-hidden")

          this.dispatchToSliders()
        }

        dispatchToSliders() {
          if (!this.listTarget.classList.contains("is-hidden")) {
            this.sliderTargets.forEach((e) => {
              const sliderControlers = this.application.getControllerForElementAndIdentifier(e, 'slider')
              sliderControlers.updateLabelPosition()
            })
          }
        }
      })

      Stimulus.register("kinds-picker", class extends Controller {
        static targets = [ "select", "sliderElement", "slider" ]

        changeKind() {
          let item = this.element.closest('[data-controller~=carbon-item]')
          // Add to this condition if we don't want to change the slider value, but change the computed result instead
          if (item) {
            item.dataset.carbonItemEmissionFactorValue = this.selectTarget.value
          }
        }
      })

      Stimulus.register("target-chooser", class extends Controller {
        static targets = [ "value", "unit" ]

        updateUnit(result) {
          if (result < 2) {
            this.unitTarget.innerHTML = "&nbsp;tonne"
          } else {
            this.unitTarget.innerHTML = "&nbsp;tonnes"
          }
        }

        mainRecapController() {
          const mainRecap = document.querySelector('[data-controller~=carbon-main-recap]')
          return this.application.getControllerForElementAndIdentifier(mainRecap, 'carbon-main-recap')
        }

        updateValue(value) {
          this.valueTarget.innerHTML = value

          this.updateUnit(this.valueTarget.value)
          this.mainRecapController().updateItemsMaxValue(value * 1000)
        }

        decreaseTargetValue() {
          let tempValue = parseInt(this.valueTarget.textContent) - 1
          this.updateValue(tempValue)
        }

        increaseTargetValue() {
          let tempValue = parseInt(this.valueTarget.textContent) + 1
          this.updateValue(tempValue)
        }
      })

      Stimulus.register("transport-creator", class extends Controller {
        static targets = [ "add", "cancel", "form", "carTemplate", "planeTemplate", "trainTemplate" ]

        connect() {
          this.formTarget.classList.add("is-hidden")
        }

        toggleSelector(event) {
          if (event) {
            event.preventDefault()
          }

          this.formTarget.classList.toggle("is-hidden")
          this.addTarget.classList.toggle("is-hidden")
        }

        addTransport(event) {
          let targetName = event.target.value + "TemplateTarget"
          var clone = this[targetName].content.cloneNode(true)
          this.element.parentNode.querySelector("ul").appendChild(clone)

          this.formTarget.reset()
          this.toggleSelector()
        }
      })


    script type="text/javascript" src="javascript.js"

body data-controller="carbon-main-recap"
  div class="header"
    div class="container is-max-widescreen"
      a class="title logo"
        = "Budget carbone annuel : "
    
      span class="target-chooser" data-controller="target-chooser"
        button.arrow.left data-action="click->target-chooser#decreaseTargetValue click->carbon-main-recap#updateResult click->carbon-main-recap#updateCarbonItems"
        span class="target-chooser-value"
          span data-carbon-main-recap-target="goal" data-target-chooser-target="value"
            = 2
          span data-target-chooser-target="unit" &nbsp;tonnes
        button.arrow.right data-action="click->target-chooser#increaseTargetValue click->carbon-main-recap#updateResult click->carbon-main-recap#updateCarbonItems"

      span class="carbon-target"
        = "Calcul : "
        span data-carbon-main-recap-target="total"
          = "0.0"
        span class="is-hidden-tablet" t
        span class="is-hidden-mobile" data-carbon-main-recap-target="unit" &nbsp;tonne

  div class="hero intro"
    div class="container is-max-widescreen"
      div class="content has-text-centered-desktop pb-6"
        h1 class="title is-1" Bienvenue sur Carbon Target&nbsp;!

        p
          | Ce projet n'a pas pour vocation d'être un nouveau calculateur d'
          a data-controller="modal" data-modal="#personalfootprint" data-action="click->modal#open"
            | empreinte carbone personnelle
          |  car
          a data-controller="modal" data-modal="#calculators" data-action="click->modal#open"
            |  il en existe déjà de très bons
          |  !
          br
          | Carbon Target apporte simplement un complément
          a data-controller="modal" data-modal="#problematic" data-action="click->modal#open"
            |  sur cette problématique du carbone
          | .

        p
          | En effet, très souvent, après avoir calculé son empreinte carbone, on se demande : "mais alors, à quoi pourrait ressembler MA vie dans un monde à 2 tonnes" ? Carbon Target tente de répondre à cette question existentielle en 2 étapes :

        ol
          li
            | Vous vous fixez un "budget carbone" annuel de x tonnes (l'idéal est de viser 2 tonnes, voire 1 tonne pour les plus ambitieux)
          li
            | Vous ajustez les curseurs des principaux postes d'émission de carbone
            a data-controller="modal" data-modal="#everydaylife" data-action="click->modal#open"
              |  sur lesquels vous avez la main dans votre vie de tous les jours
            | , sachant que l'outil ne vous laissera jamais dépasser le budget global que vous vous êtes fixé. Alors, vous privilégiez quoi ?

        p
          | S'il n'y a que 2 choses à retenir :

        ol
          li
            | Une vie à 2 tonnes, c'est possible, et ça, c'est une super nouvelle ! C'est même
            a data-controller="modal" data-modal="#desirable" data-action="click->modal#open"
              |  souhaitable et désirable
            |  !
          li
            | C'est exigeant, nos modes de vie vont devoir
            a data-controller="modal" data-modal="#change" data-action="click->modal#open"
              |  changer radicalement à tous les niveaux
            | .

        p
          | Maintenant, c'est à vous de jouer : à quoi ressemblerait votre vie à 2 tonnes ?

  div class="container block-container is-max-widescreen"
    div class="block food" data-controller="carbon-recap" data-action="carbon-recap:updateResult->carbon-main-recap#updateResult"
      h2
        span = "Se nourrir"
        span.block-result
          span data-carbon-recap-target="total" data-carbon-main-recap-target="item" 0
          span class="is-hidden-tablet" kg
          span class="is-hidden-mobile" data-carbon-recap-target="unit" &nbsp;kilo
      ul data-slide-target="list"
        li data-controller="carbon-item" data-carbon-item-emission-factor-value="7.26" data-carbon-item-frequency-value="week" data-carbon-item-min-value="0" data-carbon-item-max-value="21" data-carbon-item-current-value="0" data-carbon-item-type-value="meal" data-carbon-item-subtype-value="beef" data-carbon-recap-target="item"
          == Slim::Template.new("./src/carbon_item.slim").render({ name: "Repas à base de boeuf", id: "meal-beef", unit: "repas", frequency: "week", value: 0 })
        li data-controller="carbon-item" data-carbon-item-emission-factor-value="1.58" data-carbon-item-frequency-value="week" data-carbon-item-min-value="0" data-carbon-item-max-value="21" data-carbon-item-current-value="82.16" data-carbon-item-type-value="meal" data-carbon-item-subtype-value="chicken" data-carbon-recap-target="item"
          == Slim::Template.new("./src/carbon_item.slim").render({ name: "Repas à base de poulet", id: "meal-chicken", unit: "repas", frequency: "week", value: 2 })
        li data-controller="carbon-item" data-carbon-item-emission-factor-value="0.51" data-carbon-item-frequency-value="week" data-carbon-item-min-value="0" data-carbon-item-max-value="21" data-carbon-item-current-value="503.88" data-carbon-item-type-value="meal" data-carbon-item-subtype-value="veg" data-carbon-recap-target="item"
          == Slim::Template.new("./src/carbon_item.slim").render({ name: "Repas végétariens", id: "meal-veg", unit: "repas", frequency: "week", value: 19 })

    div class="block equipment" data-controller="carbon-recap" data-action="carbon-recap:updateResult->carbon-main-recap#updateResult"
      h2
        span = "S'équiper"
        span.block-result
          span data-carbon-recap-target="total" data-carbon-main-recap-target="item" 0
          span class="is-hidden-tablet" kg
          span class="is-hidden-mobile" data-carbon-recap-target="unit" &nbsp;kilo
      ul data-slide-target="list"
        li data-controller="carbon-item" data-carbon-item-emission-factor-value="0.6" data-carbon-item-frequency-value="year" data-carbon-item-min-value="0" data-carbon-item-max-value="333" data-carbon-item-current-value="0" data-carbon-recap-target="item"
          == Slim::Template.new("./src/carbon_item.slim").render({ name: "Vêtements neufs", id: "clothes-new", unit: "€", frequency: "year", value: 0 })
        li data-controller="carbon-item" data-carbon-item-emission-factor-value="0.6" data-carbon-item-frequency-value="year" data-carbon-item-min-value="0" data-carbon-item-max-value="333" data-carbon-item-current-value="0" data-carbon-recap-target="item"
          == Slim::Template.new("./src/carbon_item.slim").render({ name: "Meubles neufs", id: "furniture-new", unit: "€", frequency: "year", value: 0 })
        li data-controller="carbon-item" data-carbon-item-emission-factor-value="0.4" data-carbon-item-frequency-value="year" data-carbon-item-min-value="0" data-carbon-item-max-value="500" data-carbon-item-current-value="200" data-carbon-recap-target="item"
          == Slim::Template.new("./src/carbon_item.slim").render({ name: "Electronique neuf", id: "elec-new", unit: "€", frequency: "year", value: 500 })

    div class="block move" data-controller="carbon-recap" data-action="carbon-recap:updateResult->carbon-main-recap#updateResult"
      h2
        span = "Se déplacer"
        span.block-result
          span data-carbon-recap-target="total" data-carbon-main-recap-target="item" 0
          span class="is-hidden-tablet" kg
          span class="is-hidden-mobile" data-carbon-recap-target="unit" &nbsp;kilo
      ul data-slide-target="list"
        li data-controller="carbon-item kinds-picker" data-carbon-item-emission-factor-value="0.149" data-carbon-item-frequency-value="year" data-carbon-item-min-value="0" data-carbon-item-max-value="5300" data-carbon-item-current-value="789.7" data-carbon-recap-target="item"
          == Slim::Template.new("./src/carbon_item.slim").render({ name: "Voiture", id: "car", unit: "km", frequency: "year", value: 5300, kinds: [{label: "Voiture SP", emission_factor: 0.149, selected: true}, {label: "Voiture GO", emission_factor: 0.142}, {label: "Voiture VH", emission_factor: 0.098}, {label: "Voiture VE", emission_factor: 0.0687}], kinds_title: "Type de véhicule : " })
        li data-controller="carbon-item kinds-picker" data-carbon-item-emission-factor-value="0.00592" data-carbon-item-frequency-value="year" data-carbon-item-min-value="0" data-carbon-item-max-value="131925" data-carbon-item-current-value="35.52" data-carbon-recap-target="item"
          == Slim::Template.new("./src/carbon_item.slim").render({ name: "Train", id: "train", unit: "km", frequency: "year", value: 5000, kinds: [{label: "Train France", emission_factor: 0.00592, selected: true}, {label: "Train Europe", emission_factor: 0.05}], kinds_title: "Train en : " })
        li data-controller="carbon-item kinds-picker" data-carbon-item-emission-factor-value="0.258" data-carbon-item-frequency-value="year" data-carbon-item-min-value="0" data-carbon-item-max-value="3027" data-carbon-item-current-value="0" data-carbon-recap-target="item"
          == Slim::Template.new("./src/carbon_item.slim").render({ name: "Avion", id: "plane", unit: "km", frequency: "year", value: 0, kinds: [{label: "Court courrier", emission_factor: 0.258, selected: true}, {label: "Moyen courrier", emission_factor: 0.187}, {label: "Long courrier", emission_factor: 0.152}], kinds_title: "Type d'avion : " })

      div class="block transport-creator" data-controller="transport-creator"
        button class="button" data-action="transport-creator#toggleSelector" data-transport-creator-target="add"
          i.fas.fa-plus.mr-1
          | + Ajouter un moyen de transport
        form data-transport-creator-target="form"
          div.select
            select data-action="transport-creator#addTransport"
              option value="none"
                | Choisissez un tranport
              option value="car"
                | Voiture
              option value="train"
                | Train
              option value="plane"
                | Avion
          button class="button" data-action="transport-creator#toggleSelector"
            i.fas.fa-times.mr-1
            | Annuler
        template#carTemplate data-transport-creator-target="carTemplate"
          li data-controller="carbon-item kinds-picker" data-carbon-item-emission-factor-value="0.149" data-carbon-item-frequency-value="year" data-carbon-item-min-value="0" data-carbon-item-max-value="5241" data-carbon-item-current-value="0" data-carbon-recap-target="item"
            == Slim::Template.new("./src/carbon_item.slim").render({ name: "Voiture", id: "car", unit: "km", frequency: "year", value: 0, kinds: [{label: "Voiture GO", emission_factor: 0.142, selected: true}, {label: "Voiture SP", emission_factor: 0.149}, {label: "Voiture VH", emission_factor: 0.098}, {label: "Voiture VE", emission_factor: 0.0687}], kinds_title: "Type de véhicule : " })
        template#trainTemplate data-transport-creator-target="trainTemplate"
          li data-controller="carbon-item kinds-picker" data-carbon-item-emission-factor-value="0.00592" data-carbon-item-frequency-value="year" data-carbon-item-min-value="0" data-carbon-item-max-value="131925" data-carbon-item-current-value="0" data-carbon-recap-target="item"
            == Slim::Template.new("./src/carbon_item.slim").render({ name: "Train", id: "train", unit: "km", frequency: "year", value: 0, kinds: [{label: "Train France", emission_factor: 0.00592, selected: true}, {label: "Train Europe", emission_factor: 0.05}], kinds_title: "Train en : " })
        template#planeTemplate data-transport-creator-target="planeTemplate"
          li data-controller="carbon-item kinds-picker" data-carbon-item-emission-factor-value="0.258" data-carbon-item-frequency-value="year" data-carbon-item-min-value="0" data-carbon-item-max-value="3027" data-carbon-item-current-value="0" data-carbon-recap-target="item"
            == Slim::Template.new("./src/carbon_item.slim").render({ name: "Avion", id: "plane", unit: "km", frequency: "year", value: 0, kinds: [{label: "Court courrier", emission_factor: 0.258, selected: true}, {label: "Moyen courrier", emission_factor: 0.187}, {label: "Long courrier", emission_factor: 0.152}], kinds_title: "Type d'avion : " })

    div class="block home" data-controller="carbon-recap" data-action="carbon-recap:updateResult->carbon-main-recap#updateResult"
      h2
        span = "Se loger"
        span.block-result
          span data-carbon-recap-target="total" data-carbon-main-recap-target="item" 0
          span class="is-hidden-tablet" kg
          span class="is-hidden-mobile" data-carbon-recap-target="unit" &nbsp;kilo

      ul data-slide-target="list"
        li data-controller="carbon-item kinds-picker" data-carbon-item-emission-factor-value="8.5" data-carbon-item-frequency-value="year" data-carbon-item-min-value="0" data-carbon-item-max-value="100" data-carbon-item-current-value="306" data-carbon-recap-target="item"
          == Slim::Template.new("./src/carbon_item.slim").render({ name: "Consommation énergie logement", id: "electricity", unit: "m²/hab", frequency: "year", no_week: true, no_month: true, no_time_unit: true, value: 36, kinds: [{label: "Étiquette climat A", emission_factor: 3}, {label: "Étiquette climat B", emission_factor: 8.5, selected: true}, {label: "Étiquette climat C", emission_factor: 20.5}, {label: "Étiquette climat D", emission_factor: 40}, {label: "Étiquette climat E", emission_factor: 60}, {label: "Étiquette climat F", emission_factor: 85}, {label: "Étiquette climat G", emission_factor: 120}], kinds_title: "DPE du logement (étiquette climat) : " })

    section class="section"
      div class="content has-text-centered-desktop pb-6"
        p
          a data-controller="modal" data-modal="#about-us" data-action="click->modal#open"
            | À propos

  == Slim::Template.new("./src/modals.slim").render()
