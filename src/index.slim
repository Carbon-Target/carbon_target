doctype html
html
  head

    meta charset="UTF-8"
    meta name="keywords" content="Carbon target bilan carbone giec ademe environnment impact objectifs calcul"
    meta http-equiv="Content-Type" content="text/html; charset=utf-8"
    meta content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0" name="viewport"

    title Carbon Target
    link rel="icon" type="image/png" sizes="32x32" href="/images/favicons/favicon-32x32.png"
    link rel="icon" type="image/png" sizes="16x16" href="/images/favicons/favicon-16x16.png"
    link rel="shortcut icon" href="/images/favicons/favicon.ico"
    link rel="apple-touch-icon" sizes="180x180" href="/images/favicons.png"

    link rel="stylesheet" href="style.css"

    javascript [type="module"]:
      import { Application, Controller } from "https://unpkg.com/@hotwired/stimulus/dist/stimulus.js"

      window.Stimulus = Application.start()

      Stimulus.register("slider", class extends Controller {
        static targets = [ "range", "label", "value" ]

        connect() {
          setTimeout(function() {
            this.updateLabelPosition()
          }.bind(this), 1000)
          
        }

        updateLabelPosition() {
          this.valueTarget.innerHTML = this.rangeTarget.value
          this.labelTarget.style.left = `calc(${this.rangeTarget.value}% - ${this.labelTarget.clientWidth}px / 2)`
        }
      })

      Stimulus.register("carbon-item", class extends Controller {
        static targets = [ "quantity", "result" ]
        static values = { emissionFactor: Number, frequency: String }

        initialize() {
          this.frequencyHash = { day: 365, week: 52, month: 12, year: 1 }
        }

        connect() {
          this.updateResult()
        }

        computeFrequencyFactor() {
          return this.frequencyHash[this.frequencyValue]
        }

        updateResult() {
          let result = this.quantityTarget.value
            * this.computeFrequencyFactor()
            * this.emissionFactorValue

          if (result)
            result = Math.round(result)

          this.resultTarget.value = result || 0
          this.resultTarget.dispatchEvent(new Event('change'))
        }
      })

      Stimulus.register("carbon-main-recap", class extends Controller {
        static targets = [ "item", "total", "box", "unit" ]
        static classes = [ "aboveTarget", "belowTarget" ]

        initialize() {
          this.carbonTarget = 2.0
        }

        connect() {
          this.updateBoxColor(0);
        }

        // Sums the result of each line & updates the total
        updateResult() {
          let result = 0
          this.itemTargets.forEach(item => {
            result += parseFloat(item.innerHTML)
          })

           // Convert kg into t
          result = (result / 1000).toFixed(2)
          this.totalTarget.innerHTML = result

          this.updateUnit(result);
          this.updateBoxColor(result);
        }

        updateUnit(result) {
          if (result < this.carbonTarget) {
            this.unitTarget.innerHTML = "&nbsp;tonne"
          } else {
            this.unitTarget.innerHTML = "&nbsp;tonnes"
          }
        }

        updateBoxColor(result) {
          if (!this.hasBoxTarget) { return }
          if (result <= this.carbonTarget) {
            this.boxTarget.classList.remove(this.aboveTargetClass)
            this.boxTarget.classList.add(this.belowTargetClass)
          } else {
            this.boxTarget.classList.remove(this.belowTargetClass)
            this.boxTarget.classList.add(this.aboveTargetClass)
          }
        }
      })

      Stimulus.register("carbon-recap", class extends Controller {
        static targets = [ "item", "total", "box", "unit" ]

        initialize() {
          this.carbonTarget = 2.0
        }

        // Sums the result of each line & updates the total
        updateResult() {
          let result = 0
          this.itemTargets.forEach(item => {
            result += parseFloat(item.value)
          })

          result = result
          this.totalTarget.innerHTML = result

          this.updateUnit(result);
          this.dispatch("updateResult")
        }

        updateUnit(result) {
          if (result < this.carbonTarget) {
            this.unitTarget.innerHTML = "&nbsp;kilo"
          } else {
            this.unitTarget.innerHTML = "&nbsp;kilos"
          }
        }
      })

      Stimulus.register("modal", class extends Controller {
        open(event) {
          const mod = document.querySelector(this.element.dataset.modal)
          mod.classList.add("is-active")
        }

        close(event) {
          this.element.classList.remove("is-active")
        }
      })

      Stimulus.register("slide", class extends Controller {
        static targets = [ "list", "angleUp", "angleDown" ]

        connect() {
          this.listTarget.classList.add("is-hidden")
        }

        toggleList(event) {
          this.listTarget.classList.toggle("is-hidden")
          this.angleDownTarget.classList.toggle("is-hidden")
          this.angleUpTarget.classList.toggle("is-hidden")

          this.dispatchToSliders()
        }

        dispatchToSliders() {
          if (!this.listTarget.classList.contains("is-hidden")) {
            this.element.querySelectorAll(".slider").forEach((e) => {
              const sliderControlers = this.application.getControllerForElementAndIdentifier(e, 'slider')
              sliderControlers.updateLabelPosition()
            })
          }
        }
      })

    script type="text/javascript" src="javascript.js"

body class="container block is-max-desktop"
  section class="section" data-controller="carbon-main-recap" data-carbon-main-recap-below-target-class="has-background-primary-light" data-carbon-main-recap-above-target-class="has-background-danger-light"
    div class="content has-text-centered-desktop pb-6"
      h1 class="title is-1" Bienvenue sur Carbon Target&nbsp;!

      p
        | Ce projet n'a pas pour vocation d'être un nouveau calculateur d'empreinte carbone personnelle car
        a data-controller="modal" data-modal="#calculators" data-action="click->modal#open"
          |  il en existe déjà de très bons
        |  !

      p
        | Notre but est uniquement de compléter ces calculateurs sur la partie "prospective", en permettant à n'importe qui de répondre facilement et de manière personnalisée à la question : "Qu'est ce que je peux faire avec un "budget" de
        a data-controller="modal" data-modal="#twotonnes" data-action="click->modal#open"
          |  2 tonnes de CO2
        |  ?"

      p On vous spoile un peu la réponse :

      ol
        li C'est possible, et ça, c'est une super nouvelle !
        li
          | C'est exigeant, nos modes de vie vont devoir
          a data-controller="modal" data-modal="#change" data-action="click->modal#open"
            |  changer radicalement à tous les niveaux
          | .

      p Maintenant, c'est à vous de jouer : à quoi pourrait ressembler votre vie à 2 tonnes ?

    section class="level is-mobile"
      div class="box level-item has-text-centered" data-carbon-main-recap-target="box"
        div
          p class="heading" Calcul
          p class="title"
            span data-carbon-main-recap-target="total"
              = "0.00"
            span class="is-hidden-tablet" t
            span class="is-hidden-mobile" data-carbon-main-recap-target="unit" &nbsp;tonne

      div class="level-item has-text-centered"
        div
          p class="heading" VS

      div class="box level-item has-text-centered has-background-primary-light"
        div
          p class="heading" Cible
          p class="title"
            = "2"
            span class="is-hidden-tablet" t
            span class="is-hidden-mobile" &nbsp;tonnes

    div class="block" data-controller="carbon-recap slide" data-action="carbon-recap:updateResult->carbon-main-recap#updateResult"

      h2 class="title is-4 has-background-info-light p-3 is-flex is-justify-content-space-between is-clickable" data-action="click->slide#toggleList"
        span.icon-text
          span.icon
            i.fas.fa-angle-down data-slide-target="angleDown"
            i.fas.fa-angle-up.is-hidden data-slide-target="angleUp"
          span = "Se déplacer"
        span
          span data-carbon-recap-target="total" data-carbon-main-recap-target="item" 0
          span class="is-hidden-tablet" kg
          span class="is-hidden-mobile" data-carbon-recap-target="unit" &nbsp;kilo
      ul data-slide-target="list"
        li data-controller="carbon-item" data-carbon-item-emission-factor-value="0.149" data-carbon-item-frequency-value="year"
          == Slim::Template.new("./src/carbon_item.slim").render({ name: "Voiture essence", id: "car-gas", unit: "km", frequency: "year", value: 5000 })
        li data-controller="carbon-item" data-carbon-item-emission-factor-value="0.0687" data-carbon-item-frequency-value="year"
          == Slim::Template.new("./src/carbon_item.slim").render({ name: "Voiture électrique", id: "car-elec", unit: "km", frequency: "year", value: 0 })
        li data-controller="carbon-item" data-carbon-item-emission-factor-value="0.00592" data-carbon-item-frequency-value="year"
          == Slim::Template.new("./src/carbon_item.slim").render({ name: "Train France", id: "train-france", unit: "km", frequency: "year", value: 6000 })
        li data-controller="carbon-item" data-carbon-item-emission-factor-value="0.05" data-carbon-item-frequency-value="year"
          == Slim::Template.new("./src/carbon_item.slim").render({ name: "Train Europe", id: "train-euro", unit: "km", frequency: "year", value: 0 })
        li data-controller="carbon-item" data-carbon-item-emission-factor-value="0.258" data-carbon-item-frequency-value="year"
          == Slim::Template.new("./src/carbon_item.slim").render({ name: "Avion court courrier", id: "plane-short", unit: "km", frequency: "year", value: 0 })
        li data-controller="carbon-item" data-carbon-item-emission-factor-value="0.187" data-carbon-item-frequency-value="year"
          == Slim::Template.new("./src/carbon_item.slim").render({ name: "Avion moyen courrier", id: "plane-mid", unit: "km", frequency: "year", value: 0 })
        li data-controller="carbon-item" data-carbon-item-emission-factor-value="0.152" data-carbon-item-frequency-value="year"
          == Slim::Template.new("./src/carbon_item.slim").render({ name: "Avion long courrier", id: "plane-long", unit: "km", frequency: "year", value: 0 })

    div class="block" data-controller="carbon-recap slide" data-action="carbon-recap:updateResult->carbon-main-recap#updateResult"
      h2 class="title is-4 has-background-info-light p-3 is-flex is-justify-content-space-between is-clickable" data-action="click->slide#toggleList"
        span.icon-text
          span.icon
            i.fas.fa-angle-down data-slide-target="angleDown"
            i.fas.fa-angle-up.is-hidden data-slide-target="angleUp"
          span = "Se nourrir"
        span
          span data-carbon-recap-target="total" data-carbon-main-recap-target="item" 0
          span class="is-hidden-tablet" kg
          span class="is-hidden-mobile" data-carbon-recap-target="unit" &nbsp;kilo
      ul data-slide-target="list"
        li data-controller="carbon-item" data-carbon-item-emission-factor-value="7.26" data-carbon-item-frequency-value="week"
          == Slim::Template.new("./src/carbon_item.slim").render({ name: "Repas à base de boeuf", id: "meal-beef", unit: "repas", frequency: "week", value: 0 })
        li data-controller="carbon-item" data-carbon-item-emission-factor-value="1.58" data-carbon-item-frequency-value="week"
          == Slim::Template.new("./src/carbon_item.slim").render({ name: "Repas à base de poulet", id: "meal-chicken", unit: "repas", frequency: "week", value: 1 })
        li data-controller="carbon-item" data-carbon-item-emission-factor-value="0.51" data-carbon-item-frequency-value="week"
          == Slim::Template.new("./src/carbon_item.slim").render({ name: "Repas végétariens", id: "meal-veg", unit: "repas", frequency: "week", value: 20 })

    div class="block" data-controller="carbon-recap slide" data-action="carbon-recap:updateResult->carbon-main-recap#updateResult"
      h2 class="title is-4 has-background-info-light p-3 is-flex is-justify-content-space-between is-clickable" data-action="click->slide#toggleList"
        span.icon-text
          span.icon
            i.fas.fa-angle-down data-slide-target="angleDown"
            i.fas.fa-angle-up.is-hidden data-slide-target="angleUp"
          span = "S'équiper"
        span
          span data-carbon-recap-target="total" data-carbon-main-recap-target="item" 0
          span class="is-hidden-tablet" kg
          span class="is-hidden-mobile" data-carbon-recap-target="unit" &nbsp;kilo
      ul data-slide-target="list"
        li data-controller="carbon-item" data-carbon-item-emission-factor-value="0.6" data-carbon-item-frequency-value="year"
          == Slim::Template.new("./src/carbon_item.slim").render({ name: "Vêtements neufs", id: "clothes-new", unit: "€", frequency: "year", value: 0 })
        li data-controller="carbon-item" data-carbon-item-emission-factor-value="0.6" data-carbon-item-frequency-value="year"
          == Slim::Template.new("./src/carbon_item.slim").render({ name: "Meubles neufs", id: "furniture-new", unit: "€", frequency: "year", value: 0 })
        li data-controller="carbon-item" data-carbon-item-emission-factor-value="0.4" data-carbon-item-frequency-value="year"
          == Slim::Template.new("./src/carbon_item.slim").render({ name: "Electronique neuf", id: "elec-new", unit: "€", frequency: "year", value: 500 })

    div class="block" data-controller="carbon-recap slide" data-action="carbon-recap:updateResult->carbon-main-recap#updateResult"
      h2 class="title is-4 has-background-info-light p-3 is-flex is-justify-content-space-between is-clickable" data-action="click->slide#toggleList"
        span.icon-text
          span.icon
            i.fas.fa-angle-down data-slide-target="angleDown"
            i.fas.fa-angle-up.is-hidden data-slide-target="angleUp"
          span = "Se loger"
        span
          span data-carbon-recap-target="total" data-carbon-main-recap-target="item" 0
          span class="is-hidden-tablet" kg
          span class="is-hidden-mobile" data-carbon-recap-target="unit" &nbsp;kilo

      ul data-slide-target="list"
        li data-controller="carbon-item" data-carbon-item-emission-factor-value="11" data-carbon-item-frequency-value="year"
          == Slim::Template.new("./src/carbon_item.slim").render({ name: "Consommation électrique logement", id: "electricity", unit: "m²", frequency: "year", no_week: true, no_month: true, no_time_unit: true, value: 37 })

  section class="section"
    div class="content has-text-centered-desktop pb-6"
      p.has-text-centered-desktop
        = "Vous l'avez constaté, le calcul ne se base que sur 4 besoins humains \"essentiels\" (se déplacer, se nourrir, se loger, s'équiper) et n'est donc pas exhaustif. Il couvre tout de même près de 80% du périmètre de l'empreinte carbone personnelle et donne donc, sans entrer dans une grande complexité, une bonne idée de ce que l'on peut faire ou pas pour rester dans la limite des 2 tonnes."

      p class="has-text-centered-desktop"
        = "Carbon Target est un projet citoyen open source qui se base sur les données de l'ADEME (Bilan GES). Il s'agit pour l'instant d'un MVP basique et largement améliorable, qui a pour objectif de lancer une dynamique. En effet, nous serions ravis que des initiatives ou des institutions plus grandes et plus légitimes que nous (Shift Project, Datagir.Ademe.fr, Convention des Entreprises pour le Climat, MyCO2 by Carbone 4, Atelier 2 tonnes, …) aient envie de s'approprier cette idée simple pour la faire vivre et lui donner une autre dimension."

      p class="has-text-centered-desktop"
       | Que vous souhaitiez qu'on vous aide à intégrer Carbon Target à un de vos projets ou que vous souhaitiez reprendre l'idée à votre compte, n'hésitez pas à nous contacter à <a href="mailto:hello@carbontarget.earth">hello@carbontarget.earth</a> !

  == Slim::Template.new("./src/modals.slim").render()
